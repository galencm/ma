.output "$(output_path)$(peripheral.type)-gui-kv-$(I).py"
#!/usr/bin/python3

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.lang import Builder
from kivy.core.window import Window
from kivy.uix.slider import Slider


import paho.mqtt.client as mosquitto 
import time

import consul
import zerorpc

def lookup(service):
    c = consul.Consul()
    services = {k:v for (k,v) in c.agent.services().items() if k.startswith("_nomad")}
    for k in services.keys():
        if services[k]['Service'] == service:
                service_ip,service_port = services[k]['Address'],services[k]['Port']
                return service_ip,service_port
                break
    return None,None

mqtt_ip,mqtt_port = lookup('mqtt')
cli = mosquitto.Client()
cli.connect(mqtt_ip, mqtt_port, 60)
cli.loop_start()

Builder.load_string('''
<SliderGui>:
    Slider:
        id:slider
        min:0
        max:127
        value:0
''')

class SliderGui(BoxLayout):
    def __init__(self, **kwargs):
        super(SliderGui, self).__init__(**kwargs)
        self._keyboard = Window.request_keyboard(self._keyboard_closed, self)
        self._keyboard.bind(on_key_down=self._on_keyboard_down)

    def _keyboard_closed(self):
        self._keyboard.unbind(on_key_down=self._on_keyboard_down)
        self._keyboard = None

    def _on_keyboard_down(self, keyboard, keycode, text, modifiers):
        return True

    def send_values(self,*args):
. for peripheral.output
.- echo output.destination
        print('$(output.destination:)')
        cli.publish('$(output.destination:)',"TODO")
        time.sleep(0.01)
. endfor

class SliderApp(App):
    def build(self):
        return SliderGui()



if __name__ == '__main__':
    SliderApp().run()
