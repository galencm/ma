.- This Source Code Form is subject to the terms of the Mozilla Public
.- License, v. 2.0. If a copy of the MPL was not distributed with this
.- file, You can obtain one at http://mozilla.org/MPL/2.0/.
.- 
.- Copyright (c) 2017, Galen Curwen-McAdams
.-
. if switches.arg1 ?<> ""
. define output_file = switches.arg1+".yaml"
. else
. define output_file = "machine.yaml"
. define switches.arg1 = "machine"
. endif

. dir = directory.create(switches.arg2+"/generated") ?

.output switches.arg2+"/"+output_file

description:
    $(machine.description)

aliases:
.for alias
  $(alias.name): &$(alias.alias) $(alias.value)
.endfor

.for source
. new include
. if source.type = "primitive_bytes"
. define include.file = "primitives-source-simple"
. elsif source.type = "primitive_bytes_indexable"
. define include.file = "primitives-source-indexable"
. endif 
. if (.wireup ?<> "")
. define include.wireup = source.wireup
. endif
. if (.class ?<> "")
. define include.class = source.class
. endif
. define include.location = "path"
. define include.name = source.location
. define foo = xml.load_string("<argument value = \"--source-name\" />")
. copy foo to include
. define foo = xml.load_string("<argument value = \"$( source.location:)\" />")
. copy foo to include
. if source.source = "boook"
. define foo = xml.load_string("<argument value=\"--source\" />")
. copy foo to include
. define foo = xml.load_string("<argument value =\"boook\" />")
. copy foo to include
.endif

. move include to machine
. endnew
.endfor
. for peripheral
. echo "processing peripheral $(peripheral.type)"
. for .input as input
. if input.source ?<> ""
. echo "input $(input.source)"
. new route
. define route.trigger = input.source
.- define route.call = "$(input -> call)"
.- define below will fail with multiple calls in single input
. define route.call = "$(input -> call.value)"
. echo "call $(route.call)"
.- if "$(input -> argument)" ?<> ""
.-copy entire child not attribute!
. copy input -> call -> argument to route
.- endif 
.move route to machine
. endnew
. endif
. endfor
. endfor
includes:
. for include
 - $(include.file:):
. if (.duplicates ?= "true" | .duplicates ?= "false")
    allow-duplicates: $(include.duplicates:Neat)
. endif    
. if (.wireup ?= "true" | .wireup ?= "false")
    auto-wireup: $(include.wireup:Neat)
. endif  
. if (.rpc ?= "true" | .rpc ?= "false")
    as-rpc: $(include.rpc:Neat)
. endif
. if (.class ?<> "")
    use-class: $(include.class:)
. endif
. if (.location ?<> "")
    location: $(include.location:)
. endif  
. if .name ?<> ""
    name: $(include.name)
. endif
. define I = 0
. for argument
.- crude way to check if empty
. I+=1
. endfor
. if I = 0
.define args = ""
.else
.define args = "["
.endif
.for argument
.if argument.alias ?<> ""
.args+="*"+argument.alias
.else
.args+=argument.value
.endif
. if last() = 0
.args+=","
.endif
.endfor  
. if I > 0
.args+="]"
.endif
.if args ?<> ""
    args: $(args:)
.endif
. define I = 0
. for check
.- crude way to check if empty
. I+=1
. endfor
. if I = 0
.define checks = ""
.else
.define checks = "["
.endif
.for check
.checks+=check
. if last() = 0
.checks+=","
.endif
.endfor  
. if I > 0
.checks+="]"
.endif
.if checks ?<> ""
    checks: $(checks)
.endif
.endfor
.-endfor

routes:
. for route
. define args = ""
. for argument
. args += argument.value
. if last() = 0
. args += " "
. endif
. endfor
. define comparative = ""
. define I = 0
. for conditional
.- crude way to check if empty
. I+=1
. endfor
. if I = 0
. comparative += "'"
. comparative += route.trigger
. comparative += "'"
. endif
. for conditional
. if conditional.type = "less than or equal"
. define compare_symbol =  " <= "
. elsif conditional.type = "greater than or equal"
. define compare_symbol =   " >= "
. elsif conditional.type = "greater than"
. define compare_symbol =  " > "
. elsif conditional.type = "less than"
. define compare_symbol =  " < "
. elsif conditional.type = "equals"
. define compare_symbol =  " == "
. endif
. if total(conditional) = 1
. define comparative += "'"
. comparative += route.trigger
. comparative += "'"
. comparative += compare_symbol
. comparative += conditional
. endif
. if last(conditional) = 0 & total(conditional) = 2
. comparative += conditional
. comparative += compare_symbol
.endif
. if last(conditional) = 1 & total(conditional) = 2
. comparative += " "
. comparative += "'"
. comparative += route.trigger
. comparative += "'"
. comparative += compare_symbol
. comparative += conditional
. endif
. endfor
 - "if $(comparative) do $(route.call) $(args)"
.endfor

pipes:
 - > 
.for sequence
  pipe $(sequence.name) {
.for step
.define args = ""
.define description = step.description+": " ? ""
.for argument
.args+=argument.value
. if last() = 0
. args += " "
. endif
.endfor
      $(description)$(step.call) $(args)
.endfor
  }
.endfor

rules:
.for pattern
.define rulestring = ""
.for rule
.rulestring+="['"+rule.field+"','"+rule.field_type+"']"
. if last() = 0
.rulestring+=","
.endif
.endfor
 - [$(pattern.name),$(rulestring)]
.endfor

.-can set and prepare be combined?
prepare:
.for prepare
 - $(prepare.file)
.endfor

set:
.for source
 - $(source.location:):
.for set
   - $(set.symbol:):$(set.peripheral:): $(set.value:)
.endfor
.endfor